// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAllStatsHandlerFunc turns a function with the right signature into a get all stats handler
type GetAllStatsHandlerFunc func(GetAllStatsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAllStatsHandlerFunc) Handle(params GetAllStatsParams) middleware.Responder {
	return fn(params)
}

// GetAllStatsHandler interface for that can handle valid get all stats params
type GetAllStatsHandler interface {
	Handle(GetAllStatsParams) middleware.Responder
}

// NewGetAllStats creates a new http.Handler for the get all stats operation
func NewGetAllStats(ctx *middleware.Context, handler GetAllStatsHandler) *GetAllStats {
	return &GetAllStats{Context: ctx, Handler: handler}
}

/* GetAllStats swagger:route GET /stats getAllStats

GetAllStats get all stats API

*/
type GetAllStats struct {
	Context *middleware.Context
	Handler GetAllStatsHandler
}

func (o *GetAllStats) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAllStatsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
