// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Stats stats
//
// swagger:model stats
type Stats struct {

	// drawn
	// Required: true
	Drawn *int64 `json:"drawn"`

	// lost
	// Required: true
	Lost *int64 `json:"lost"`

	// played
	// Required: true
	Played *int64 `json:"played"`

	// points
	// Required: true
	Points *int64 `json:"points"`

	// team
	// Required: true
	// Min Length: 1
	Team *string `json:"team"`

	// won
	// Required: true
	Won *int64 `json:"won"`
}

// Validate validates this stats
func (m *Stats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDrawn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlayed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Stats) validateDrawn(formats strfmt.Registry) error {

	if err := validate.Required("drawn", "body", m.Drawn); err != nil {
		return err
	}

	return nil
}

func (m *Stats) validateLost(formats strfmt.Registry) error {

	if err := validate.Required("lost", "body", m.Lost); err != nil {
		return err
	}

	return nil
}

func (m *Stats) validatePlayed(formats strfmt.Registry) error {

	if err := validate.Required("played", "body", m.Played); err != nil {
		return err
	}

	return nil
}

func (m *Stats) validatePoints(formats strfmt.Registry) error {

	if err := validate.Required("points", "body", m.Points); err != nil {
		return err
	}

	return nil
}

func (m *Stats) validateTeam(formats strfmt.Registry) error {

	if err := validate.Required("team", "body", m.Team); err != nil {
		return err
	}

	if err := validate.MinLength("team", "body", *m.Team, 1); err != nil {
		return err
	}

	return nil
}

func (m *Stats) validateWon(formats strfmt.Registry) error {

	if err := validate.Required("won", "body", m.Won); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stats based on context it is used
func (m *Stats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Stats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Stats) UnmarshalBinary(b []byte) error {
	var res Stats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
