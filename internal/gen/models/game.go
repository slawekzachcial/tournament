// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Game game
//
// swagger:model game
type Game struct {

	// score a
	// Required: true
	ScoreA *int64 `json:"scoreA"`

	// score b
	// Required: true
	ScoreB *int64 `json:"scoreB"`

	// team a
	// Required: true
	// Min Length: 1
	TeamA *string `json:"teamA"`

	// team b
	// Required: true
	// Min Length: 1
	TeamB *string `json:"teamB"`
}

// Validate validates this game
func (m *Game) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScoreA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScoreB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamB(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Game) validateScoreA(formats strfmt.Registry) error {

	if err := validate.Required("scoreA", "body", m.ScoreA); err != nil {
		return err
	}

	return nil
}

func (m *Game) validateScoreB(formats strfmt.Registry) error {

	if err := validate.Required("scoreB", "body", m.ScoreB); err != nil {
		return err
	}

	return nil
}

func (m *Game) validateTeamA(formats strfmt.Registry) error {

	if err := validate.Required("teamA", "body", m.TeamA); err != nil {
		return err
	}

	if err := validate.MinLength("teamA", "body", *m.TeamA, 1); err != nil {
		return err
	}

	return nil
}

func (m *Game) validateTeamB(formats strfmt.Registry) error {

	if err := validate.Required("teamB", "body", m.TeamB); err != nil {
		return err
	}

	if err := validate.MinLength("teamB", "body", *m.TeamB, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this game based on context it is used
func (m *Game) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Game) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Game) UnmarshalBinary(b []byte) error {
	var res Game
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
